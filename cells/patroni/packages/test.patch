diff --git i/patroni/dcs/consul.py w/patroni/dcs/consul.py
index 8b4c25b..75cda49 100644
--- i/patroni/dcs/consul.py
+++ w/patroni/dcs/consul.py
@@ -43,6 +43,7 @@ Response = namedtuple('Response', 'code,headers,body,content')
 class HTTPClient(object):
 
     def __init__(self, host='127.0.0.1', port=8500, token=None, scheme='http', verify=True, cert=None, ca_cert=None):
+        logger.info(f"Initialization Token: {token}")
         self.token = token
         self._read_timeout = 10
         self.base_uri = uri(scheme, (host, port))
@@ -118,6 +119,7 @@ class HTTPClient(object):
             kwargs['headers'] = (headers or {}).copy()
             kwargs['headers'].update(urllib3.make_headers(user_agent=USER_AGENT))
             token = params.pop('token', self.token) if isinstance(params, dict) else self.token
+            logger.info(f"Call Token: {token}")
             if token:
                 kwargs['headers']['X-Consul-Token'] = token
             return callback(self.response(self.http.request(method.upper(), self.uri(path, params), **kwargs)))
@@ -146,6 +148,7 @@ class ConsulClient(base.Consul):
         return self.http_connect(*args, **kwargs)
 
     def reload_config(self, config):
+        logger.info(f"Reload: ConsulClient: {config.get('token')}")
         self.http.token = self.token = config.get('token')
         self.consistency = config.get('consistency', 'default')
         self.dc = config.get('dc')
@@ -261,6 +264,7 @@ class Consul(AbstractDCS):
 
         self._previous_loop_register_service = self._register_service
         self._register_service = should_register_service
+        logger.info(f"Reload: ConsulDSC: {consul_config.get('token')}")
 
     def set_ttl(self, ttl):
         if self._client.http.set_ttl(ttl/2.0):  # Consul multiplies the TTL by 2x
